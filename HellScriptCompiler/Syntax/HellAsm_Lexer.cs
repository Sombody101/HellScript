//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/HellScriptProject/HellScript.cs/HellScriptCompiler/Syntax/HellAsm_Lexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class HellAsm_Lexer : HellAsmLexerBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MetaProgram=1, Structure=2, CompilerArg=3, Local=4, Method=5, ArgCount=6, 
		DoubleQuote=7, Comma=8, Semi=9, Colon=10, OpenBrack=11, CloseBrack=12, 
		OpenParen=13, CloseParen=14, BoxOpen=15, BoxClose=16, Dollar=17, At=18, 
		Equals=19, Ampersand=20, LocalReference=21, StructReference=22, Identifier=23, 
		SingleLineComment=24, StringConstant=25, FastConstant=26, FloatingConstant=27, 
		IntegerConstant=28, Whitespace=29, Newline=30, UnexpectedCharacter=31;
	public const int
		ERROR=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"MetaProgram", "Structure", "CompilerArg", "Local", "Method", "ArgCount", 
		"DoubleQuote", "Comma", "Semi", "Colon", "OpenBrack", "CloseBrack", "OpenParen", 
		"CloseParen", "BoxOpen", "BoxClose", "Dollar", "At", "Equals", "Ampersand", 
		"LocalReference", "StructReference", "Identifier", "SingleLineComment", 
		"StringConstant", "FastConstant", "FloatingConstant", "IntegerConstant", 
		"IntStart", "IntPart", "Whitespace", "Newline", "UnexpectedCharacter", 
		"EncodingPrefix", "SCharSequence", "SChar", "IdentifierStart", "IdentifierPart", 
		"IdentifierLast", "EscapeSequence", "SimpleEscapeSequence", "OctalEscapeSequence", 
		"UniversalCharacterName", "HexQuad", "HexadecimalEscapeSequence", "HexadecimalDigit", 
		"OctalConstant", "OctalDigit"
	};


	public HellAsm_Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public HellAsm_Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'.program'", "'.struct'", "'.compilerdata'", "'.local'", "'.method'", 
		"'.args'", "'\"'", "','", "';'", "':'", "'{'", "'}'", "'('", "')'", "'['", 
		"']'", "'$'", "'@'", "'='", "'&'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MetaProgram", "Structure", "CompilerArg", "Local", "Method", "ArgCount", 
		"DoubleQuote", "Comma", "Semi", "Colon", "OpenBrack", "CloseBrack", "OpenParen", 
		"CloseParen", "BoxOpen", "BoxClose", "Dollar", "At", "Equals", "Ampersand", 
		"LocalReference", "StructReference", "Identifier", "SingleLineComment", 
		"StringConstant", "FastConstant", "FloatingConstant", "IntegerConstant", 
		"Whitespace", "Newline", "UnexpectedCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HellAsm_Lexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static HellAsm_Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,31,345,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,
		8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,
		15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,
		21,1,22,1,22,5,22,186,8,22,10,22,12,22,189,9,22,1,22,3,22,192,8,22,1,23,
		1,23,5,23,196,8,23,10,23,12,23,199,9,23,1,23,1,23,1,24,3,24,204,8,24,1,
		24,1,24,3,24,208,8,24,1,24,1,24,1,25,1,25,1,25,3,25,215,8,25,1,25,1,25,
		1,26,3,26,220,8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,3,27,230,8,
		27,1,27,1,27,1,27,1,27,3,27,236,8,27,1,27,3,27,239,8,27,1,28,1,28,1,29,
		4,29,244,8,29,11,29,12,29,245,1,30,4,30,249,8,30,11,30,12,30,250,1,30,
		1,30,1,31,1,31,3,31,257,8,31,1,31,3,31,260,8,31,1,31,1,31,1,32,1,32,1,
		32,1,32,1,33,1,33,1,33,3,33,271,8,33,1,34,4,34,274,8,34,11,34,12,34,275,
		1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,285,8,35,1,36,1,36,1,37,1,37,1,
		38,1,38,1,39,1,39,1,39,1,39,3,39,297,8,39,1,40,1,40,1,40,1,41,1,41,1,41,
		3,41,305,8,41,1,41,3,41,308,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
		42,1,42,1,42,3,42,320,8,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,
		4,44,331,8,44,11,44,12,44,332,1,45,1,45,1,46,1,46,5,46,339,8,46,10,46,
		12,46,342,9,46,1,47,1,47,0,0,48,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
		9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
		21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,0,59,0,61,29,63,30,65,
		31,67,0,69,0,71,0,73,0,75,0,77,0,79,0,81,0,83,0,85,0,87,0,89,0,91,0,93,
		0,95,0,1,0,12,3,0,10,10,13,13,8232,8233,1,0,48,57,2,0,48,57,95,95,4,0,
		9,9,11,12,32,32,160,160,3,0,76,76,85,85,117,117,4,0,10,10,13,13,34,34,
		92,92,4,0,60,60,62,62,65,90,95,122,6,0,46,46,48,58,60,60,62,62,65,90,95,
		122,5,0,48,57,60,60,62,62,65,90,95,122,10,0,34,34,39,39,63,63,92,92,97,
		98,102,102,110,110,114,114,116,116,118,118,3,0,48,57,65,70,97,102,1,0,
		48,55,354,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
		0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
		0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
		1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
		0,0,55,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,1,97,1,0,0,0,3,106,
		1,0,0,0,5,114,1,0,0,0,7,128,1,0,0,0,9,135,1,0,0,0,11,143,1,0,0,0,13,149,
		1,0,0,0,15,151,1,0,0,0,17,153,1,0,0,0,19,155,1,0,0,0,21,157,1,0,0,0,23,
		159,1,0,0,0,25,161,1,0,0,0,27,163,1,0,0,0,29,165,1,0,0,0,31,167,1,0,0,
		0,33,169,1,0,0,0,35,171,1,0,0,0,37,173,1,0,0,0,39,175,1,0,0,0,41,177,1,
		0,0,0,43,180,1,0,0,0,45,183,1,0,0,0,47,193,1,0,0,0,49,203,1,0,0,0,51,211,
		1,0,0,0,53,219,1,0,0,0,55,238,1,0,0,0,57,240,1,0,0,0,59,243,1,0,0,0,61,
		248,1,0,0,0,63,259,1,0,0,0,65,263,1,0,0,0,67,270,1,0,0,0,69,273,1,0,0,
		0,71,284,1,0,0,0,73,286,1,0,0,0,75,288,1,0,0,0,77,290,1,0,0,0,79,296,1,
		0,0,0,81,298,1,0,0,0,83,301,1,0,0,0,85,319,1,0,0,0,87,321,1,0,0,0,89,326,
		1,0,0,0,91,334,1,0,0,0,93,336,1,0,0,0,95,343,1,0,0,0,97,98,5,46,0,0,98,
		99,5,112,0,0,99,100,5,114,0,0,100,101,5,111,0,0,101,102,5,103,0,0,102,
		103,5,114,0,0,103,104,5,97,0,0,104,105,5,109,0,0,105,2,1,0,0,0,106,107,
		5,46,0,0,107,108,5,115,0,0,108,109,5,116,0,0,109,110,5,114,0,0,110,111,
		5,117,0,0,111,112,5,99,0,0,112,113,5,116,0,0,113,4,1,0,0,0,114,115,5,46,
		0,0,115,116,5,99,0,0,116,117,5,111,0,0,117,118,5,109,0,0,118,119,5,112,
		0,0,119,120,5,105,0,0,120,121,5,108,0,0,121,122,5,101,0,0,122,123,5,114,
		0,0,123,124,5,100,0,0,124,125,5,97,0,0,125,126,5,116,0,0,126,127,5,97,
		0,0,127,6,1,0,0,0,128,129,5,46,0,0,129,130,5,108,0,0,130,131,5,111,0,0,
		131,132,5,99,0,0,132,133,5,97,0,0,133,134,5,108,0,0,134,8,1,0,0,0,135,
		136,5,46,0,0,136,137,5,109,0,0,137,138,5,101,0,0,138,139,5,116,0,0,139,
		140,5,104,0,0,140,141,5,111,0,0,141,142,5,100,0,0,142,10,1,0,0,0,143,144,
		5,46,0,0,144,145,5,97,0,0,145,146,5,114,0,0,146,147,5,103,0,0,147,148,
		5,115,0,0,148,12,1,0,0,0,149,150,5,34,0,0,150,14,1,0,0,0,151,152,5,44,
		0,0,152,16,1,0,0,0,153,154,5,59,0,0,154,18,1,0,0,0,155,156,5,58,0,0,156,
		20,1,0,0,0,157,158,5,123,0,0,158,22,1,0,0,0,159,160,5,125,0,0,160,24,1,
		0,0,0,161,162,5,40,0,0,162,26,1,0,0,0,163,164,5,41,0,0,164,28,1,0,0,0,
		165,166,5,91,0,0,166,30,1,0,0,0,167,168,5,93,0,0,168,32,1,0,0,0,169,170,
		5,36,0,0,170,34,1,0,0,0,171,172,5,64,0,0,172,36,1,0,0,0,173,174,5,61,0,
		0,174,38,1,0,0,0,175,176,5,38,0,0,176,40,1,0,0,0,177,178,5,36,0,0,178,
		179,3,45,22,0,179,42,1,0,0,0,180,181,5,38,0,0,181,182,3,45,22,0,182,44,
		1,0,0,0,183,191,3,73,36,0,184,186,3,75,37,0,185,184,1,0,0,0,186,189,1,
		0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,190,1,0,0,0,189,187,1,0,0,0,
		190,192,3,77,38,0,191,187,1,0,0,0,191,192,1,0,0,0,192,46,1,0,0,0,193,197,
		5,59,0,0,194,196,8,0,0,0,195,194,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,
		0,197,198,1,0,0,0,198,200,1,0,0,0,199,197,1,0,0,0,200,201,6,23,0,0,201,
		48,1,0,0,0,202,204,3,67,33,0,203,202,1,0,0,0,203,204,1,0,0,0,204,205,1,
		0,0,0,205,207,5,34,0,0,206,208,3,69,34,0,207,206,1,0,0,0,207,208,1,0,0,
		0,208,209,1,0,0,0,209,210,5,34,0,0,210,50,1,0,0,0,211,214,5,91,0,0,212,
		215,3,55,27,0,213,215,3,53,26,0,214,212,1,0,0,0,214,213,1,0,0,0,215,216,
		1,0,0,0,216,217,5,93,0,0,217,52,1,0,0,0,218,220,5,45,0,0,219,218,1,0,0,
		0,219,220,1,0,0,0,220,221,1,0,0,0,221,222,3,57,28,0,222,223,3,59,29,0,
		223,224,1,0,0,0,224,225,5,46,0,0,225,226,3,57,28,0,226,227,3,59,29,0,227,
		54,1,0,0,0,228,230,5,45,0,0,229,228,1,0,0,0,229,230,1,0,0,0,230,231,1,
		0,0,0,231,232,3,57,28,0,232,233,3,59,29,0,233,239,1,0,0,0,234,236,5,45,
		0,0,235,234,1,0,0,0,235,236,1,0,0,0,236,237,1,0,0,0,237,239,3,57,28,0,
		238,229,1,0,0,0,238,235,1,0,0,0,239,56,1,0,0,0,240,241,7,1,0,0,241,58,
		1,0,0,0,242,244,7,2,0,0,243,242,1,0,0,0,244,245,1,0,0,0,245,243,1,0,0,
		0,245,246,1,0,0,0,246,60,1,0,0,0,247,249,7,3,0,0,248,247,1,0,0,0,249,250,
		1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,252,1,0,0,0,252,253,6,30,0,
		0,253,62,1,0,0,0,254,256,5,13,0,0,255,257,5,10,0,0,256,255,1,0,0,0,256,
		257,1,0,0,0,257,260,1,0,0,0,258,260,5,10,0,0,259,254,1,0,0,0,259,258,1,
		0,0,0,260,261,1,0,0,0,261,262,6,31,0,0,262,64,1,0,0,0,263,264,9,0,0,0,
		264,265,1,0,0,0,265,266,6,32,1,0,266,66,1,0,0,0,267,268,5,117,0,0,268,
		271,5,56,0,0,269,271,7,4,0,0,270,267,1,0,0,0,270,269,1,0,0,0,271,68,1,
		0,0,0,272,274,3,71,35,0,273,272,1,0,0,0,274,275,1,0,0,0,275,273,1,0,0,
		0,275,276,1,0,0,0,276,70,1,0,0,0,277,285,8,5,0,0,278,285,3,79,39,0,279,
		280,5,92,0,0,280,285,5,10,0,0,281,282,5,92,0,0,282,283,5,13,0,0,283,285,
		5,10,0,0,284,277,1,0,0,0,284,278,1,0,0,0,284,279,1,0,0,0,284,281,1,0,0,
		0,285,72,1,0,0,0,286,287,7,6,0,0,287,74,1,0,0,0,288,289,7,7,0,0,289,76,
		1,0,0,0,290,291,7,8,0,0,291,78,1,0,0,0,292,297,3,81,40,0,293,297,3,83,
		41,0,294,297,3,89,44,0,295,297,3,85,42,0,296,292,1,0,0,0,296,293,1,0,0,
		0,296,294,1,0,0,0,296,295,1,0,0,0,297,80,1,0,0,0,298,299,5,92,0,0,299,
		300,7,9,0,0,300,82,1,0,0,0,301,302,5,92,0,0,302,304,3,95,47,0,303,305,
		3,95,47,0,304,303,1,0,0,0,304,305,1,0,0,0,305,307,1,0,0,0,306,308,3,95,
		47,0,307,306,1,0,0,0,307,308,1,0,0,0,308,84,1,0,0,0,309,310,5,92,0,0,310,
		311,5,117,0,0,311,312,1,0,0,0,312,320,3,87,43,0,313,314,5,92,0,0,314,315,
		5,85,0,0,315,316,1,0,0,0,316,317,3,87,43,0,317,318,3,87,43,0,318,320,1,
		0,0,0,319,309,1,0,0,0,319,313,1,0,0,0,320,86,1,0,0,0,321,322,3,91,45,0,
		322,323,3,91,45,0,323,324,3,91,45,0,324,325,3,91,45,0,325,88,1,0,0,0,326,
		327,5,92,0,0,327,328,5,120,0,0,328,330,1,0,0,0,329,331,3,91,45,0,330,329,
		1,0,0,0,331,332,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,90,1,0,0,0,
		334,335,7,10,0,0,335,92,1,0,0,0,336,340,5,48,0,0,337,339,3,95,47,0,338,
		337,1,0,0,0,339,342,1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,94,1,0,
		0,0,342,340,1,0,0,0,343,344,7,11,0,0,344,96,1,0,0,0,24,0,187,191,197,203,
		207,214,219,229,235,238,245,250,256,259,270,275,284,296,304,307,319,332,
		340,2,0,1,0,0,2,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
