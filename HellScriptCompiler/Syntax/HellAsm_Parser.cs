//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/HellScriptProject/HellScript.cs/HellScriptCompiler/Syntax/HellAsm_Parser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class HellAsm_Parser : HellAsmParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MetaProgram=1, Structure=2, CompilerArg=3, Method=4, ArgCount=5, DoubleQuote=6, 
		Comma=7, Semi=8, Colon=9, OpenBrack=10, CloseBrack=11, OpenParen=12, CloseParen=13, 
		BoxOpen=14, BoxClose=15, Equals=16, Identifier=17, SingleLineComment=18, 
		StringConstant=19, FastConstant=20, FloatingConstant=21, IntegerConstant=22, 
		Whitespace=23, Newline=24, UnexpectedCharacter=25;
	public const int
		RULE_program = 0, RULE_programLine = 1, RULE_programMetadata = 2, RULE_metadataSet = 3, 
		RULE_methodDeclaration = 4, RULE_structDeclaration = 5, RULE_definitionMetadata = 6, 
		RULE_line = 7, RULE_label = 8, RULE_opcode = 9, RULE_argumentList = 10, 
		RULE_argument = 11, RULE_methodReference = 12, RULE_skipWhitespace = 13;
	public static readonly string[] ruleNames = {
		"program", "programLine", "programMetadata", "metadataSet", "methodDeclaration", 
		"structDeclaration", "definitionMetadata", "line", "label", "opcode", 
		"argumentList", "argument", "methodReference", "skipWhitespace"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.program'", "'.struct'", "'.compilerdata'", "'.method'", "'.args'", 
		"'\"'", "','", "';'", "':'", "'{'", "'}'", "'('", "')'", "'['", "']'", 
		"'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MetaProgram", "Structure", "CompilerArg", "Method", "ArgCount", 
		"DoubleQuote", "Comma", "Semi", "Colon", "OpenBrack", "CloseBrack", "OpenParen", 
		"CloseParen", "BoxOpen", "BoxClose", "Equals", "Identifier", "SingleLineComment", 
		"StringConstant", "FastConstant", "FloatingConstant", "IntegerConstant", 
		"Whitespace", "Newline", "UnexpectedCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HellAsm_Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static HellAsm_Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public HellAsm_Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public HellAsm_Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramMetadataContext programMetadata() {
			return GetRuleContext<ProgramMetadataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(HellAsm_Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgramLineContext[] programLine() {
			return GetRuleContexts<ProgramLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramLineContext programLine(int i) {
			return GetRuleContext<ProgramLineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHellAsm_ParserVisitor<TResult> typedVisitor = visitor as IHellAsm_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			programMetadata();
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Method || _la==Identifier) {
				{
				{
				State = 29;
				programLine();
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 35;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public ProgramLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHellAsm_ParserVisitor<TResult> typedVisitor = visitor as IHellAsm_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramLineContext programLine() {
		ProgramLineContext _localctx = new ProgramLineContext(Context, State);
		EnterRule(_localctx, 2, RULE_programLine);
		try {
			State = 39;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 37;
				line();
				}
				break;
			case Method:
				EnterOuterAlt(_localctx, 2);
				{
				State = 38;
				methodDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramMetadataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MetaProgram() { return GetToken(HellAsm_Parser.MetaProgram, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrack() { return GetToken(HellAsm_Parser.OpenBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrack() { return GetToken(HellAsm_Parser.CloseBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MetadataSetContext[] metadataSet() {
			return GetRuleContexts<MetadataSetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetadataSetContext metadataSet(int i) {
			return GetRuleContext<MetadataSetContext>(i);
		}
		public ProgramMetadataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programMetadata; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHellAsm_ParserVisitor<TResult> typedVisitor = visitor as IHellAsm_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramMetadata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramMetadataContext programMetadata() {
		ProgramMetadataContext _localctx = new ProgramMetadataContext(Context, State);
		EnterRule(_localctx, 4, RULE_programMetadata);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			Match(MetaProgram);
			State = 42;
			Match(OpenBrack);
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Identifier) {
				{
				{
				State = 43;
				metadataSet();
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 49;
			Match(CloseBrack);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetadataSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(HellAsm_Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(HellAsm_Parser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public MetadataSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadataSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHellAsm_ParserVisitor<TResult> typedVisitor = visitor as IHellAsm_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetadataSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetadataSetContext metadataSet() {
		MetadataSetContext _localctx = new MetadataSetContext(Context, State);
		EnterRule(_localctx, 6, RULE_metadataSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(Identifier);
			State = 52;
			Match(Equals);
			State = 53;
			argument();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Method() { return GetToken(HellAsm_Parser.Method, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(HellAsm_Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(HellAsm_Parser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ArgCount() { return GetToken(HellAsm_Parser.ArgCount, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerConstant() { return GetToken(HellAsm_Parser.IntegerConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(HellAsm_Parser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrack() { return GetToken(HellAsm_Parser.OpenBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrack() { return GetToken(HellAsm_Parser.CloseBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionMetadataContext definitionMetadata() {
			return GetRuleContext<DefinitionMetadataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHellAsm_ParserVisitor<TResult> typedVisitor = visitor as IHellAsm_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			Match(Method);
			State = 56;
			Match(Identifier);
			State = 57;
			Match(OpenParen);
			State = 58;
			Match(ArgCount);
			State = 59;
			Match(IntegerConstant);
			State = 60;
			Match(CloseParen);
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CompilerArg) {
				{
				State = 61;
				definitionMetadata();
				}
			}

			State = 64;
			Match(OpenBrack);
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Identifier) {
				{
				{
				State = 65;
				line();
				}
				}
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 71;
			Match(CloseBrack);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Structure() { return GetToken(HellAsm_Parser.Structure, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(HellAsm_Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrack() { return GetToken(HellAsm_Parser.OpenBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrack() { return GetToken(HellAsm_Parser.CloseBrack, 0); }
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHellAsm_ParserVisitor<TResult> typedVisitor = visitor as IHellAsm_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_structDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(Structure);
			State = 74;
			Match(Identifier);
			State = 75;
			Match(OpenBrack);
			State = 76;
			Match(CloseBrack);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionMetadataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CompilerArg() { return GetToken(HellAsm_Parser.CompilerArg, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrack() { return GetToken(HellAsm_Parser.OpenBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrack() { return GetToken(HellAsm_Parser.CloseBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MetadataSetContext[] metadataSet() {
			return GetRuleContexts<MetadataSetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetadataSetContext metadataSet(int i) {
			return GetRuleContext<MetadataSetContext>(i);
		}
		public DefinitionMetadataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definitionMetadata; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHellAsm_ParserVisitor<TResult> typedVisitor = visitor as IHellAsm_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinitionMetadata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionMetadataContext definitionMetadata() {
		DefinitionMetadataContext _localctx = new DefinitionMetadataContext(Context, State);
		EnterRule(_localctx, 12, RULE_definitionMetadata);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(CompilerArg);
			State = 79;
			Match(OpenBrack);
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Identifier) {
				{
				{
				State = 80;
				metadataSet();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 86;
			Match(CloseBrack);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpcodeContext opcode() {
			return GetRuleContext<OpcodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHellAsm_ParserVisitor<TResult> typedVisitor = visitor as IHellAsm_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 14, RULE_line);
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88;
				opcode();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89;
				label();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(HellAsm_Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(HellAsm_Parser.Colon, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHellAsm_ParserVisitor<TResult> typedVisitor = visitor as IHellAsm_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 16, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(Identifier);
			State = 93;
			Match(Colon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpcodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(HellAsm_Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodReferenceContext methodReference() {
			return GetRuleContext<MethodReferenceContext>(0);
		}
		public OpcodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHellAsm_ParserVisitor<TResult> typedVisitor = visitor as IHellAsm_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpcodeContext opcode() {
		OpcodeContext _localctx = new OpcodeContext(Context, State);
		EnterRule(_localctx, 18, RULE_opcode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			Match(Identifier);
			State = 98;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 96;
				argument();
				}
				break;
			case 2:
				{
				State = 97;
				methodReference();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(HellAsm_Parser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(HellAsm_Parser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(HellAsm_Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(HellAsm_Parser.Comma, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHellAsm_ParserVisitor<TResult> typedVisitor = visitor as IHellAsm_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 20, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(Identifier);
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 101;
				Match(Comma);
				State = 102;
				Match(Identifier);
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringConstant() { return GetToken(HellAsm_Parser.StringConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FastConstant() { return GetToken(HellAsm_Parser.FastConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatingConstant() { return GetToken(HellAsm_Parser.FloatingConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerConstant() { return GetToken(HellAsm_Parser.IntegerConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoxOpen() { return GetToken(HellAsm_Parser.BoxOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(HellAsm_Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoxClose() { return GetToken(HellAsm_Parser.BoxClose, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHellAsm_ParserVisitor<TResult> typedVisitor = visitor as IHellAsm_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 22, RULE_argument);
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108;
				Match(StringConstant);
				}
				break;
			case FastConstant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109;
				Match(FastConstant);
				}
				break;
			case FloatingConstant:
				EnterOuterAlt(_localctx, 3);
				{
				State = 110;
				Match(FloatingConstant);
				}
				break;
			case IntegerConstant:
				EnterOuterAlt(_localctx, 4);
				{
				State = 111;
				Match(IntegerConstant);
				}
				break;
			case BoxOpen:
				EnterOuterAlt(_localctx, 5);
				{
				State = 112;
				Match(BoxOpen);
				State = 113;
				Match(Identifier);
				State = 114;
				Match(BoxClose);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(HellAsm_Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(HellAsm_Parser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(HellAsm_Parser.CloseParen, 0); }
		public MethodReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHellAsm_ParserVisitor<TResult> typedVisitor = visitor as IHellAsm_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodReferenceContext methodReference() {
		MethodReferenceContext _localctx = new MethodReferenceContext(Context, State);
		EnterRule(_localctx, 24, RULE_methodReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(Identifier);
			State = 118;
			Match(OpenParen);
			State = 119;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipWhitespaceContext : ParserRuleContext {
		public SkipWhitespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skipWhitespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHellAsm_ParserVisitor<TResult> typedVisitor = visitor as IHellAsm_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkipWhitespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipWhitespaceContext skipWhitespace() {
		SkipWhitespaceContext _localctx = new SkipWhitespaceContext(Context, State);
		EnterRule(_localctx, 26, RULE_skipWhitespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			skip();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,25,124,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,1,0,5,
		0,31,8,0,10,0,12,0,34,9,0,1,0,1,0,1,1,1,1,3,1,40,8,1,1,2,1,2,1,2,5,2,45,
		8,2,10,2,12,2,48,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,3,4,63,8,4,1,4,1,4,5,4,67,8,4,10,4,12,4,70,9,4,1,4,1,4,1,5,1,5,1,5,1,
		5,1,5,1,6,1,6,1,6,5,6,82,8,6,10,6,12,6,85,9,6,1,6,1,6,1,7,1,7,3,7,91,8,
		7,1,8,1,8,1,8,1,9,1,9,1,9,3,9,99,8,9,1,10,1,10,1,10,5,10,104,8,10,10,10,
		12,10,107,9,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,116,8,11,1,12,1,
		12,1,12,1,12,1,13,1,13,1,13,0,0,14,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		0,0,123,0,28,1,0,0,0,2,39,1,0,0,0,4,41,1,0,0,0,6,51,1,0,0,0,8,55,1,0,0,
		0,10,73,1,0,0,0,12,78,1,0,0,0,14,90,1,0,0,0,16,92,1,0,0,0,18,95,1,0,0,
		0,20,100,1,0,0,0,22,115,1,0,0,0,24,117,1,0,0,0,26,121,1,0,0,0,28,32,3,
		4,2,0,29,31,3,2,1,0,30,29,1,0,0,0,31,34,1,0,0,0,32,30,1,0,0,0,32,33,1,
		0,0,0,33,35,1,0,0,0,34,32,1,0,0,0,35,36,5,0,0,1,36,1,1,0,0,0,37,40,3,14,
		7,0,38,40,3,8,4,0,39,37,1,0,0,0,39,38,1,0,0,0,40,3,1,0,0,0,41,42,5,1,0,
		0,42,46,5,10,0,0,43,45,3,6,3,0,44,43,1,0,0,0,45,48,1,0,0,0,46,44,1,0,0,
		0,46,47,1,0,0,0,47,49,1,0,0,0,48,46,1,0,0,0,49,50,5,11,0,0,50,5,1,0,0,
		0,51,52,5,17,0,0,52,53,5,16,0,0,53,54,3,22,11,0,54,7,1,0,0,0,55,56,5,4,
		0,0,56,57,5,17,0,0,57,58,5,12,0,0,58,59,5,5,0,0,59,60,5,22,0,0,60,62,5,
		13,0,0,61,63,3,12,6,0,62,61,1,0,0,0,62,63,1,0,0,0,63,64,1,0,0,0,64,68,
		5,10,0,0,65,67,3,14,7,0,66,65,1,0,0,0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,
		1,0,0,0,69,71,1,0,0,0,70,68,1,0,0,0,71,72,5,11,0,0,72,9,1,0,0,0,73,74,
		5,2,0,0,74,75,5,17,0,0,75,76,5,10,0,0,76,77,5,11,0,0,77,11,1,0,0,0,78,
		79,5,3,0,0,79,83,5,10,0,0,80,82,3,6,3,0,81,80,1,0,0,0,82,85,1,0,0,0,83,
		81,1,0,0,0,83,84,1,0,0,0,84,86,1,0,0,0,85,83,1,0,0,0,86,87,5,11,0,0,87,
		13,1,0,0,0,88,91,3,18,9,0,89,91,3,16,8,0,90,88,1,0,0,0,90,89,1,0,0,0,91,
		15,1,0,0,0,92,93,5,17,0,0,93,94,5,9,0,0,94,17,1,0,0,0,95,98,5,17,0,0,96,
		99,3,22,11,0,97,99,3,24,12,0,98,96,1,0,0,0,98,97,1,0,0,0,98,99,1,0,0,0,
		99,19,1,0,0,0,100,105,5,17,0,0,101,102,5,7,0,0,102,104,5,17,0,0,103,101,
		1,0,0,0,104,107,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,21,1,0,0,0,
		107,105,1,0,0,0,108,116,5,19,0,0,109,116,5,20,0,0,110,116,5,21,0,0,111,
		116,5,22,0,0,112,113,5,14,0,0,113,114,5,17,0,0,114,116,5,15,0,0,115,108,
		1,0,0,0,115,109,1,0,0,0,115,110,1,0,0,0,115,111,1,0,0,0,115,112,1,0,0,
		0,116,23,1,0,0,0,117,118,5,17,0,0,118,119,5,12,0,0,119,120,5,13,0,0,120,
		25,1,0,0,0,121,122,6,13,-1,0,122,27,1,0,0,0,10,32,39,46,62,68,83,90,98,
		105,115
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
